{
  lib,
  config,
}: let
  cfg = config.aux.foundation.stages.stage1.gnumake.boot;

  builders = config.aux.foundation.builders;

  stage1 = config.aux.foundation.stages.stage1;
in {
  options.aux.foundation.stages.stage1.gnumake.boot = {
    package = lib.options.create {
      type = lib.types.derivation;
      description = "The package to use for gnumake.";
    };

    version = lib.options.create {
      type = lib.types.string;
      description = "Version of the package.";
    };

    src = lib.options.create {
      type = lib.types.derivation;
      description = "Source for the package.";
    };
  };

  config = {
    aux.foundation.stages.stage1.gnumake.boot = {
      version = "4.4.1";

      src = builtins.fetchurl {
        url = "https://ftpmirror.gnu.org/make/make-${cfg.version}.tar.gz";
        sha256 = "1cwgcmwdn7gqn5da2ia91gkyiqs9birr10sy5ykpkaxzcwfzn5nx";
      };

      package = let
        patches = [
          # Replaces /bin/sh with sh, see patch file for reasoning
          ./patches/0001-No-impure-bin-sh.patch
          # Purity: don't look for library dependencies (of the form `-lfoo') in /lib
          # and /usr/lib. It's a stupid feature anyway. Likewise, when searching for
          # included Makefiles, don't look in /usr/include and friends.
          ./patches/0002-remove-impure-dirs.patch
          # Fixes for tinycc. See comments in patch file for reasoning
          ./patches/0003-tinycc-support.patch
        ];

        /*
        Maintenance notes:

        Generated by
            ./configure \
              --build i686-pc-linux-gnu \
              --host i686-pc-linux-gnu \
              CC="${tinycc.compiler}/bin/tcc -B ${tinycc.libs}/lib" \
              ac_cv_func_dup=no
        - `ac_cv_func_dup` disabled as mes-libc doesn't implement tmpfile()

        The output src/config.h was then manually filtered, removing definitions that
        didn't have uses in the source code
        */
        config = [
          "-DFILE_TIMESTAMP_HI_RES=0"
          "-DHAVE_ALLOCA"
          "-DHAVE_ALLOCA_H"
          "-DHAVE_ATEXIT"
          "-DHAVE_DECL_BSD_SIGNAL=0"
          "-DHAVE_DECL_GETLOADAVG=0"
          "-DHAVE_DECL_SYS_SIGLIST=0"
          "-DHAVE_DECL__SYS_SIGLIST=0"
          "-DHAVE_DECL___SYS_SIGLIST=0"
          "-DHAVE_DIRENT_H"
          "-DHAVE_DUP2"
          "-DHAVE_FCNTL_H"
          "-DHAVE_FDOPEN"
          "-DHAVE_GETCWD"
          "-DHAVE_GETTIMEOFDAY"
          "-DHAVE_INTTYPES_H"
          "-DHAVE_ISATTY"
          "-DHAVE_LIMITS_H"
          "-DHAVE_LOCALE_H"
          "-DHAVE_MEMORY_H"
          "-DHAVE_MKTEMP"
          "-DHAVE_SA_RESTART"
          "-DHAVE_SETVBUF"
          "-DHAVE_SIGACTION"
          "-DHAVE_SIGSETMASK"
          "-DHAVE_STDINT_H"
          "-DHAVE_STDLIB_H"
          "-DHAVE_STRDUP"
          "-DHAVE_STRERROR"
          "-DHAVE_STRINGS_H"
          "-DHAVE_STRING_H"
          "-DHAVE_STRTOLL"
          "-DHAVE_SYS_FILE_H"
          "-DHAVE_SYS_PARAM_H"
          "-DHAVE_SYS_RESOURCE_H"
          "-DHAVE_SYS_SELECT_H"
          "-DHAVE_SYS_STAT_H"
          "-DHAVE_SYS_TIMEB_H"
          "-DHAVE_SYS_TIME_H"
          "-DHAVE_SYS_WAIT_H"
          "-DHAVE_TTYNAME"
          "-DHAVE_UMASK"
          "-DHAVE_UNISTD_H"
          "-DHAVE_WAITPID"
          "-DMAKE_JOBSERVER"
          "-DMAKE_SYMLINKS"
          "-DPATH_SEPARATOR_CHAR=':'"
          "-DSCCS_GET=\\\"get\\\""
          "-DSTDC_HEADERS"
          "-Dsig_atomic_t=int"
          "-Dvfork=fork"
        ];

        cflags =
          [
            "-I./src"
            "-I./lib"
            "-DHAVE_CONFIG_H"
            "-DMAKE_MAINTAINER_MODE"
            "-DLIBDIR=\\\"${builtins.placeholder "out"}/lib\\\""
            "-DLOCALEDIR=\\\"/fake-locale\\\""
            "-DPOSIX=1"
            # mes-libc doesn't implement osync_* methods
            "-DNO_OUTPUT_SYNC=1"
            # mes-libc doesn't define O_TMPFILE
            "-DO_TMPFILE=020000000"
          ]
          ++ config;

        sources = {
          # Maintenance note: list of source files derived from Basic.mk
          make = [
            "src/ar.c"
            "src/arscan.c"
            "src/commands.c"
            "src/default.c"
            "src/dir.c"
            "src/expand.c"
            "src/file.c"
            "src/function.c"
            "src/getopt.c"
            "src/getopt1.c"
            "src/guile.c"
            "src/hash.c"
            "src/implicit.c"
            "src/job.c"
            "src/load.c"
            "src/loadapi.c"
            "src/main.c"
            "src/misc.c"
            "src/output.c"
            "src/read.c"
            "src/remake.c"
            "src/rule.c"
            "src/shuffle.c"
            "src/signame.c"
            "src/strcache.c"
            "src/variable.c"
            "src/version.c"
            "src/vpath.c"
          ];
          glob = [
            "lib/fnmatch.c"
            "lib/glob.c"
          ];
          remote = [
            "src/remote-stub.c"
          ];
        };

        files =
          sources.make
          ++ sources.glob
          ++ sources.remote
          ++ [
            "src/posixos.c"
          ];

        objects =
          builtins.map
          (
            value:
              builtins.replaceStrings [".c"] [".o"]
              (builtins.baseNameOf value)
          )
          files;
      in
        builders.kaem.build {
          name = "gnumake-${cfg.version}";

          meta = stage1.gnumake.meta;

          deps.build.host = [
            stage1.tinycc.mes.compiler.package
            stage1.gnupatch.package
          ];

          script = ''
            # Unpack
            ungz --file ${cfg.src} --output make.tar
            untar --file make.tar
            rm make.tar
            cd make-${cfg.version}

            # Patch
            ${lib.strings.concatMapSep "\n" (file: "patch -Np1 -i ${file}") patches}

            # Configure
            catm src/config.h src/mkconfig.h src/mkcustom.h
            cp lib/glob.in.h lib/glob.h
            cp lib/fnmatch.in.h lib/fnmatch.h

            # Compile
            alias CC="tcc -B ${stage1.tinycc.mes.libs.package}/lib ${builtins.concatStringsSep " " cflags}"
            ${lib.strings.concatMapSep "\n" (file: "CC -c ${file}") files}

            # Link
            CC -o make ${builtins.concatStringsSep " " objects}

            # Check
            ./make --version

            # Install
            mkdir -p ''${out}/bin
            cp ./make ''${out}/bin
            chmod 555 ''${out}/bin/make
          '';
        };
    };
  };
}
